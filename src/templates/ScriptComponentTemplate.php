<?php

namespace templates;

/*
%namespace%                         bundle namespace 
%classname%                         component class name
%projectname%                       name from namespace
%projectMainClass%                  main class 
%projectMainClassNamespace%         main class namespace
*/

class ScriptComponentTemplate
{

    public static function getData($namespace, $classname, $projectName, $projectMainClass, $projectMainClassNamespace, $bundleClassName)
    {
        $fn = self::getFileName(
            ["%namespace%", "%classname%", "%bundle%"],
            [$namespace, $projectMainClass, $bundleClassName]
        );
        $fd = self::getFileTemplate(
            ["%classname%", "%projectname%", "%projectMainClass%", "%projectMainClassNamespace%", "%bundle%", "%namespace%"],
            [$classname, $projectName, $projectMainClass, $projectMainClassNamespace, $bundleClassName, $namespace]
        );

        $temp = [];

        foreach ($fn as $key => $name) {
            $temp[$key] = [
                "filepath" => $name,
                "filedata" => $fd[$key]
            ];
        }

        return $temp;
    }

    public static function getFileName($from, $to): array
    {
        $pathList = [
            '%namespace%\components\%classname%ScriptComponent.php',
            '%namespace%\components\%classname%ScriptComponent.xml',
            '%bundle%.php'
        ];

        return self::prepare($from, $to, $pathList);
    }

    public static function getFileTemplate($from, $to): array
    {
        $templateList = [
            "<?php


namespace develnext\\bundle\%projectname%\components;

use %projectMainClassNamespace%\\%projectMainClass%;
use ide\scripts\AbstractScriptComponent;

class %projectMainClass%ScriptComponent extends AbstractScriptComponent
{
    public function isOrigin(\$any)
    {
        return \$any instanceof %projectMainClass%ScriptComponent;
    }

    public function getName()
    {
        return '%projectMainClass%';
    }

    public function getIcon()
    {
        return 'develnext/bundle/%projectname%/icon32.png';
    }

    public function getIdPattern()
    {
        return '%projectMainClass%%s';
    }

    public function getGroup()
    {
        return 'autogenerated group';
    }

    public function getType()
    {
        return %projectMainClass%::class;
    }

    public function getDescription()
    {
        return 'autogenerated file please change it caption';
    }
}", '
<element extends="ide\scripts\elements\AbstractComponent">
    <init>
        <property code="autogeneratedPropertyname" value="autogenerated default value"/>
    </init>

    <properties>
        <property code="autogeneratedPropertyname" name="autogenerated field label" editor="text" tooltip="autogenerated description"/>
    </properties>

    <properties group="group" title="title group" sort="1500">
        <property code="autogeneratedPropertyname" name="autogenerated field label" editor="text" tooltip="autogenerated description"/>
    </properties>

    <eventTypes>
        <!--events-->
        <eventType code="error" name="Error" kind="ObjectEvent"/>
    </eventTypes>
</element>',
            '<?php

namespace %namespace%;


use develnext\bundle\%projectname%\components\%projectMainClass%ScriptComponent;

use ide\bundle\AbstractBundle;
use ide\bundle\AbstractJarBundle;
use ide\formats\ScriptModuleFormat;
use ide\Ide;
use ide\project\Project;

class %classname% extends AbstractJarBundle
{
    public function onAdd(Project $project, AbstractBundle $owner = null)
    {
        parent::onAdd($project, $owner);

        $format = Ide::get()->getRegisteredFormat(ScriptModuleFormat::class);

        if ($format) {
            $format->register(new %projectMainClass%ScriptComponent());
        }
    }


    public function onRemove(Project $project, AbstractBundle $owner = null)
    {
        parent::onRemove($project, $owner);

        $format = Ide::get()->getRegisteredFormat(ScriptModuleFormat::class);

        if ($format) {
            $format->unregister(new %projectMainClass%ScriptComponent());
        }
    }
}
'
        ];


        return self::prepare($from, $to, $templateList);
    }

    private static function prepare($from, $to, $data): array
    {
        return str_replace($from, $to, $data);
    }
}

